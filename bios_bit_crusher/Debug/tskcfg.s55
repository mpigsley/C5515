;;   Do *not* directly modify this file.  It was   
;;   generated by the Configuration Tool; any 
;;   changes risk being overwritten.               

;; INPUT tsk.cdb

;; CONFIGURATION/VERSION INFORMATION
	.asg "Sun Apr 13 13:15:42 2014", VERS$DATE

;; PROLOGUE
	.include tskcfg.h55
	.copy confbeg.s55

;; TYPE HEADERS
	.include gbl.h55
	.include mem.h55
	.include obj.h55
	.include buf.h55
	.include pool.h55
	.include clk.h55
	.include prd.h55
	.include rtdx.h55
	.include hst.h55
	.include hwi.h55
	.include swi.h55
	.include tsk.h55
	.include idl.h55
	.include isrc.h55
	.include log.h55
	.include pip.h55
	.include sem.h55
	.include mbx.h55
	.include que.h55
	.include lck.h55
	.include sts.h55
	.include sys.h55
	.include sio.h55
	.include gio.h55
	.include dev.h55
	.include udev.h55
	.include dio.h55
	.include dgn.h55
	.include dhl.h55
	.include dpi.h55
	.include msgq.h55
	.include hook.h55
	.include pwrm.h55

;; TYPE ATTRIBUTES
MEM$NUMOF           .set 6
MEM$SETOF           .set 00H
OBJ$NUMOF           .set 0
OBJ$SETOF           .set 00H
BUF$NUMOF           .set 0
BUF$SETOF           .set 00H
CLK$NUMOF           .set 1
CLK$SETOF           .set 00H
PRD$NUMOF           .set 0
PRD$SETOF           .set 00H
RTDX$NUMOF          .set 0
RTDX$SETOF          .set 00H
HST$NUMOF           .set 2
HST$SETOF           .set 03H
HWI$NUMOF           .set 32
HWI$SETOF           .set 0ffffH
SWI$NUMOF           .set 1
SWI$SETOF           .set 00H
TSK$NUMOF           .set 3
TSK$SETOF           .set 00H
IDL$NUMOF           .set 4
IDL$SETOF           .set 00H
ISRC$NUMOF          .set 0
ISRC$SETOF          .set 00H
LOG$NUMOF           .set 2
LOG$SETOF           .set 00H
PIP$NUMOF           .set 0
PIP$SETOF           .set 00H
SEM$NUMOF           .set 2
SEM$SETOF           .set 00H
MBX$NUMOF           .set 0
MBX$SETOF           .set 00H
QUE$NUMOF           .set 0
QUE$SETOF           .set 00H
LCK$NUMOF           .set 0
LCK$SETOF           .set 00H
STS$NUMOF           .set 1
STS$SETOF           .set 00H
SIO$NUMOF           .set 0
SIO$SETOF           .set 00H
DEV$NUMOF           .set 0
DEV$SETOF           .set 00H
UDEV$NUMOF          .set 0
UDEV$SETOF          .set 00H
DIO$NUMOF           .set 0
DIO$SETOF           .set 00H
DGN$NUMOF           .set 0
DGN$SETOF           .set 00H
DHL$NUMOF           .set 0
DHL$SETOF           .set 00H
DPI$NUMOF           .set 0
DPI$SETOF           .set 00H
HOOK$NUMOF          .set 0
HOOK$SETOF          .set 00H

;; module GBL (ROM, PROCID, CLKIN, FREQ, DSPTYPE, DSPSUBTYPE, CLKTYPE, MODIFYCLKMD, CLKMD, PLLM, PLLDIV0, PLLDIV1, USERINIT, USERINITFXN, ENABLEINST, LARGEMODEL, ENABLEICACHE, CACHETYPE, CACHEICRTAG1, CACHEICRTAG2, SUPPORTCSL, TRCMASKVALUE, CALLCSLCFGINIT, BIOS_BOOTFXN, DCRPOSTEDWRITE)
	.global GBL$                     ; == 1
	.global GBL_ROM                  ; tskcfg.h55
	.global GBL_PROCID               ; tskcfg.h55
	.global GBL_CLKIN                ; tskcfg.h55
	.global GBL_FREQ                 ; tskcfg.h55
	.global GBL_DSPTYPE              ; tskcfg.h55
	.global GBL_DSPSUBTYPE           ; tskcfg.h55
	.global GBL_CLKTYPE              ; tskcfg.h55
	.global GBL_MODIFYCLKMD          ; tskcfg.h55
	.global GBL_CLKMD                ; tskcfg.h55
	.global GBL_PLLM                 ; tskcfg.h55
	.global GBL_PLLDIV0              ; tskcfg.h55
	.global GBL_PLLDIV1              ; tskcfg.h55
	.global GBL_USERINIT             ; tskcfg.h55
	.global GBL_USERINITFXN          ; tskcfg.cmd
	.global GBL_ENABLEINST           ; tskcfg.h55
	.global GBL_LARGEMODEL           ; tskcfg.h55
	.global GBL_ENABLEICACHE         ; tskcfg.h55
	.global GBL_CACHETYPE            ; tskcfg.h55
	.global GBL_CACHEICRTAG1         ; tskcfg.h55
	.global GBL_CACHEICRTAG2         ; tskcfg.h55
	.global GBL_SUPPORTCSL           ; tskcfg.h55
	.global GBL_TRCMASKVALUE         ; tskcfg.h55
	.global GBL_CALLCSLCFGINIT       ; tskcfg.h55
	.global GBL_BIOS_BOOTFXN         ; tskcfg.cmd
	.global GBL_DCRPOSTEDWRITE       ; tskcfg.h55

;; module MEM (gNumHeap, SEGZERO, MALLOCSEG)
	.global MEM$                     ; == 1
	.global MEM_gNumHeap             ; tskcfg.h55
	.global MEM_SEGZERO              ; tskcfg.cmd
	.global MEM_MALLOCSEG            ; tskcfg.cmd

;; module OBJ ()
	.global OBJ$                     ; == 0

;; module BUF (ENABLED)
	.global BUF$                     ; == 0
	.global BUF_ENABLED              ; tskcfg.h55

;; module POOL (USEPOOL)
	.global POOL$                    ; == 0
	.global POOL_USEPOOL             ; tskcfg.h55

;; module CLK (IMR0TINTMASK, IMR1TINTMASK, INTBIT, TIMERIMRMASK, TIMER0FUNC, TIMER0ARG, TIMER1FUNC, TIMER1ARG, TIMER2FUNC, TIMER2ARG, REGS, TIMERIMR, TIMERIFR, TIMERNUM, USETIMER, MICROSECS, TCR, TDDR, TDDRHIGH, PRD, PRDHIGH, COUNTSPMS, COUNTSPMSHIGH, TIMEFXN, HOOKFXN, CALDIV, CALMULT, HTIMEDIV, HTIMEMULT, LTIMEDIV, LTIMEMULT, HTIMEPERLTIME)
	.global CLK$                     ; == 1
	.global CLK_IMR0TINTMASK         ; tskcfg.h55
	.global CLK_IMR1TINTMASK         ; tskcfg.h55
	.global CLK_INTBIT               ; tskcfg.h55
	.global CLK_TIMERIMRMASK         ; tskcfg.h55
	.global CLK_TIMER0FUNC           ; tskcfg.cmd
	.global CLK_TIMER0ARG            ; tskcfg.h55
	.global CLK_TIMER1FUNC           ; tskcfg.cmd
	.global CLK_TIMER1ARG            ; tskcfg.h55
	.global CLK_TIMER2FUNC           ; tskcfg.cmd
	.global CLK_TIMER2ARG            ; tskcfg.h55
	.global CLK_REGS                 ; tskcfg.h55
	.global CLK_TIMERIMR             ; tskcfg.h55
	.global CLK_TIMERIFR             ; tskcfg.h55
	.global CLK_TIMERNUM             ; tskcfg.h55
	.global CLK_USETIMER             ; tskcfg.h55
	.global CLK_MICROSECS            ; tskcfg.h55
	.global CLK_TCR                  ; tskcfg.h55
	.global CLK_TDDR                 ; tskcfg.h55
	.global CLK_TDDRHIGH             ; tskcfg.h55
	.global CLK_PRD                  ; tskcfg.h55
	.global CLK_PRDHIGH              ; tskcfg.h55
	.global CLK_COUNTSPMS            ; tskcfg.h55
	.global CLK_COUNTSPMSHIGH        ; tskcfg.h55
	.global CLK_TIMEFXN              ; tskcfg.cmd
	.global CLK_HOOKFXN              ; tskcfg.cmd
	.global CLK_CALDIV               ; tskcfg.h55
	.global CLK_CALMULT              ; tskcfg.h55
	.global CLK_HTIMEDIV             ; tskcfg.h55
	.global CLK_HTIMEMULT            ; tskcfg.h55
	.global CLK_LTIMEDIV             ; tskcfg.h55
	.global CLK_LTIMEMULT            ; tskcfg.h55
	.global CLK_HTIMEPERLTIME        ; tskcfg.h55

;; module PRD (SCALAR, THOOKFXN)
	.global PRD$                     ; == 1
	.global PRD_SCALAR               ; tskcfg.h55
	.global PRD_THOOKFXN             ; tskcfg.cmd

;; module RTDX (USERTDX, USERTEXECUTION, RTDXTYPE, DATAMEMSEG, BUFMEMSIZE)
	.global RTDX$                    ; == 1
	.global RTDX_USERTDX             ; tskcfg.h55
	.global RTDX_USERTEXECUTION      ; tskcfg.h55
	.global RTDX_RTDXTYPE            ; tskcfg.h55
	.global RTDX_DATAMEMSEG          ; tskcfg.cmd
	.global RTDX_BUFMEMSIZE          ; tskcfg.h55

;; module HST (RTDX, DSM, NONE, BIOSLINK, MAXFRAMESET, MAXFRAMEALLOWED, DSMBUFSEG, DSMMEMSIZE, CHNLDRVNAME, BIOSLINKDEVICE)
	.global HST$                     ; == 1
	.global HST_RTDX                 ; tskcfg.h55
	.global HST_DSM                  ; tskcfg.h55
	.global HST_NONE                 ; tskcfg.h55
	.global HST_BIOSLINK             ; tskcfg.h55
	.global HST_MAXFRAMESET          ; tskcfg.h55
	.global HST_MAXFRAMEALLOWED      ; tskcfg.h55
	.global HST_DSMBUFSEG            ; tskcfg.cmd
	.global HST_DSMMEMSIZE           ; tskcfg.h55
	.global HST_CHNLDRVNAME          ; tskcfg.h55
	.global HST_BIOSLINKDEVICE       ; tskcfg.h55

;; module HWI (ZEROTAB, STACKMODEL)
	.global HWI$                     ; == 1
	.global HWI_ZEROTAB              ; tskcfg.h55
	.global HWI_STACKMODEL           ; tskcfg.h55

;; module SWI (EHOOKFXN, IHOOKFXN, EXECFXN, RUNFXN)
	.global SWI$                     ; == 1
	.global SWI_EHOOKFXN             ; tskcfg.cmd
	.global SWI_IHOOKFXN             ; tskcfg.cmd
	.global SWI_EXECFXN              ; tskcfg.cmd
	.global SWI_RUNFXN               ; tskcfg.cmd

;; module TSK (STACKSIZE, SYSTACKSIZE, STACKSEG, PRIORITY, VCREATEFXN, VDELETEFXN, VEXITFXN, SWITCHFXN, READYFXN, NUM_HOOKS)
	.global TSK$                     ; == 1
	.global TSK_STACKSIZE            ; tskcfg.h55
	.global TSK_SYSTACKSIZE          ; tskcfg.h55
	.global TSK_STACKSEG             ; tskcfg.cmd
	.global TSK_PRIORITY             ; tskcfg.h55
	.global TSK_VCREATEFXN           ; tskcfg.cmd
	.global TSK_VDELETEFXN           ; tskcfg.cmd
	.global TSK_VEXITFXN             ; tskcfg.cmd
	.global TSK_SWITCHFXN            ; tskcfg.h55
	.global TSK_READYFXN             ; tskcfg.h55
	.global TSK_NUM_HOOKS            ; tskcfg.h55

;; module IDL (USECLKIDLTIME, CALIBRFXN, CALIBRERROR)
	.global IDL$                     ; == 1
	.global IDL_USECLKIDLTIME        ; tskcfg.h55
	.global IDL_CALIBRFXN            ; tskcfg.cmd
	.global IDL_CALIBRERROR          ; tskcfg.h55

;; module ISRC ()
	.global ISRC$                    ; == 1

;; module LOG (ENABLED)
	.global LOG$                     ; == 1
	.global LOG_ENABLED              ; tskcfg.h55

;; module PIP (gNumEmbed, gNextId, OBJSIZE)
	.global PIP$                     ; == 0
	.global PIP_gNumEmbed            ; tskcfg.h55
	.global PIP_gNextId              ; tskcfg.h55
	.global PIP_OBJSIZE              ; tskcfg.h55

;; module SEM ()
	.global SEM$                     ; == 1

;; module MBX ()
	.global MBX$                     ; == 0

;; module QUE ()
	.global QUE$                     ; == 1

;; module LCK ()
	.global LCK$                     ; == 1

;; module STS ()
	.global STS$                     ; == 1

;; module SYS (ABORTFXN, ERRORFXN, EXITFXN, PUTCFXN)
	.global SYS$                     ; == 1
	.global SYS_ABORTFXN             ; tskcfg.cmd
	.global SYS_ERRORFXN             ; tskcfg.cmd
	.global SYS_EXITFXN              ; tskcfg.cmd
	.global SYS_PUTCFXN              ; tskcfg.cmd

;; module SIO ()
	.global SIO$                     ; == 0

;; module GIO (CREATEFXN, DELETEFXN, PENDFXN, POSTFXN)
	.global GIO$                     ; == 0
	.global GIO_CREATEFXN            ; tskcfg.cmd
	.global GIO_DELETEFXN            ; tskcfg.cmd
	.global GIO_PENDFXN              ; tskcfg.cmd
	.global GIO_POSTFXN              ; tskcfg.cmd

;; module DEV ()
	.global DEV$                     ; == 0

;; module UDEV ()
	.global UDEV$                    ; == 0

;; module DIO (STATIC, NUMTSKBASE, NUMSWIBASE)
	.global DIO$                     ; == 0
	.global DIO_STATIC               ; tskcfg.h55
	.global DIO_NUMTSKBASE           ; tskcfg.h55
	.global DIO_NUMSWIBASE           ; tskcfg.h55

;; module DGN ()
	.global DGN$                     ; == 0

;; module DHL (gChannelsAvailable)
	.global DHL$                     ; == 0
	.global DHL_gChannelsAvailable   ; tskcfg.h55

;; module DPI ()
	.global DPI$                     ; == 0

;; module MSGQ (USEMSGQ)
	.global MSGQ$                    ; == 0
	.global MSGQ_USEMSGQ             ; tskcfg.h55

;; module HOOK (KNLID)
	.global HOOK$                    ; == 0
	.global HOOK_KNLID               ; tskcfg.h55

;; module PWRM (PWRM_ENABLE, PWRM_BOOTHOOKFXN, PWRM_ADAPTCLK, PWRM_IDLEMASK, PWRM_CAPSMASK, PWRM_SCALING, PWRM_INITSP, PWRM_INITMILVOLTS, PWRM_DS_IDLEMASK, PWRM_IER0, PWRM_IER1)
	.global PWRM$                    ; == 1
	.global PWRM_PWRM_ENABLE         ; tskcfg.h55
	.global PWRM_PWRM_BOOTHOOKFXN    ; tskcfg.cmd
	.global PWRM_PWRM_ADAPTCLK       ; tskcfg.h55
	.global PWRM_PWRM_IDLEMASK       ; tskcfg.h55
	.global PWRM_PWRM_CAPSMASK       ; tskcfg.h55
	.global PWRM_PWRM_SCALING        ; tskcfg.h55
	.global PWRM_PWRM_INITSP         ; tskcfg.h55
	.global PWRM_PWRM_INITMILVOLTS   ; tskcfg.h55
	.global PWRM_PWRM_DS_IDLEMASK    ; tskcfg.h55
	.global PWRM_PWRM_IER0           ; tskcfg.h55
	.global PWRM_PWRM_IER1           ; tskcfg.h55

;; MODULE CONFIGURATION

;; ======== GBL_config ========
	.asg 00H, _ROM
	.asg 00H, _PROCID
	.asg 04e20H, _CLKIN
	.asg 0186a0H, _FREQ
	.asg 037H, _DSPTYPE
	.asg 01581H, _DSPSUBTYPE
	.asg 01581H, _CLKTYPE
	.asg 00H, _MODIFYCLKMD
	.asg 01H, _CLKMD
	.asg 0fH, _PLLM
	.asg 08000H, _PLLDIV0
	.asg 08003H, _PLLDIV1
	.asg 00H, _USERINIT
	.asg _FXN_F_nop, _USERINITFXN
	.asg 01H, _ENABLEINST
	.asg 01H, _LARGEMODEL
	.asg 00H, _ENABLEICACHE
	.asg 02H, _CACHETYPE
	.asg 0f80000H, _CACHEICRTAG1
	.asg 0f81000H, _CACHEICRTAG2
	.asg 00H, _SUPPORTCSL
	.asg 0dbefH, _TRCMASKVALUE
	.asg 00H, _CALLCSLCFGINIT
	.asg _FXN_F_nop, _BIOS_BOOTFXN
	.asg 01H, _DCRPOSTEDWRITE
	GBL_config  _ROM, _PROCID, _CLKIN, _FREQ, _DSPTYPE, _DSPSUBTYPE, _CLKTYPE, _MODIFYCLKMD, _CLKMD, _PLLM, _PLLDIV0, _PLLDIV1, _USERINIT, _USERINITFXN, _ENABLEINST, _LARGEMODEL, _ENABLEICACHE, _CACHETYPE, _CACHEICRTAG1, _CACHEICRTAG2, _SUPPORTCSL, _TRCMASKVALUE, _CALLCSLCFGINIT, _BIOS_BOOTFXN, _DCRPOSTEDWRITE

;; ======== MEM_config ========
	.asg 01H, _gNumHeap
	.asg DARAM, _SEGZERO
	.asg DARAM, _MALLOCSEG
	MEM_config  _gNumHeap, _SEGZERO, _MALLOCSEG

;; ======== OBJ_config ========
	OBJ_config

;; ======== BUF_config ========
	.asg 01H, _ENABLED
	BUF_config  _ENABLED

;; ======== POOL_config ========
	.asg 00H, _USEPOOL
	POOL_config  _USEPOOL

;; ======== CLK_config ========
	.asg 010H, _IMR0TINTMASK
	.asg 00H, _IMR1TINTMASK
	.asg 00H, _INTBIT
	.asg 010H, _TIMERIMRMASK
	.asg _CLK_isr, _TIMER0FUNC
	.asg 01H, _TIMER0ARG
	.asg FXN_F_nop, _TIMER1FUNC
	.asg 00H, _TIMER1ARG
	.asg FXN_F_nop, _TIMER2FUNC
	.asg 00H, _TIMER2ARG
	.asg 01810H, _REGS
	.asg 045H, _TIMERIMR
	.asg 046H, _TIMERIFR
	.asg 00H, _TIMERNUM
	.asg 01H, _USETIMER
	.asg 03e8H, _MICROSECS
	.asg 020H, _TCR
	.asg 00H, _TDDR
	.asg 00H, _TDDRHIGH
	.asg 0c34fH, _PRD
	.asg 00H, _PRDHIGH
	.asg 0c350H, _COUNTSPMS
	.asg 00H, _COUNTSPMSHIGH
	.asg _CLK_getshtime, _TIMEFXN
	.asg _CLK_dispRun, _HOOKFXN
	.asg 01H, _CALDIV
	.asg 04H, _CALMULT
	.asg 01H, _HTIMEDIV
	.asg 02H, _HTIMEMULT
	.asg 01H, _LTIMEDIV
	.asg 0186a0H, _LTIMEMULT
	.asg 0c350H, _HTIMEPERLTIME
	CLK_config  _IMR0TINTMASK, _IMR1TINTMASK, _INTBIT, _TIMERIMRMASK, _TIMER0FUNC, _TIMER0ARG, _TIMER1FUNC, _TIMER1ARG, _TIMER2FUNC, _TIMER2ARG, _REGS, _TIMERIMR, _TIMERIFR, _TIMERNUM, _USETIMER, _MICROSECS, _TCR, _TDDR, _TDDRHIGH, _PRD, _PRDHIGH, _COUNTSPMS, _COUNTSPMSHIGH, _TIMEFXN, _HOOKFXN, _CALDIV, _CALMULT, _HTIMEDIV, _HTIMEMULT, _LTIMEDIV, _LTIMEMULT, _HTIMEPERLTIME

;; ======== PRD_config ========
	.asg 04000H, _SCALAR
	.asg KNL_tick_stub, _THOOKFXN
	PRD_config  _SCALAR, _THOOKFXN

;; ======== RTDX_config ========
	.asg 01H, _USERTDX
	.asg 00H, _USERTEXECUTION
	.asg "JTAG", _RTDXTYPE
	.asg DARAM, _DATAMEMSEG
	.asg 0102H, _BUFMEMSIZE
	RTDX_config  _USERTDX, _USERTEXECUTION, _RTDXTYPE, _DATAMEMSEG, _BUFMEMSIZE

;; ======== HST_config ========
	.asg 01H, _RTDX
	.asg 00H, _DSM
	.asg 00H, _NONE
	.asg 00H, _BIOSLINK
	.asg 040H, _MAXFRAMESET
	.asg 0ffH, _MAXFRAMEALLOWED
	.asg DARAM, _DSMBUFSEG
	.asg 0400H, _DSMMEMSIZE
	.asg "default", _CHNLDRVNAME
	.asg "undefined", _BIOSLINKDEVICE
	HST_config  _RTDX, _DSM, _NONE, _BIOSLINK, _MAXFRAMESET, _MAXFRAMEALLOWED, _DSMBUFSEG, _DSMMEMSIZE, _CHNLDRVNAME, _BIOSLINKDEVICE

;; ======== HWI_config ========
	.asg 00H, _ZEROTAB
	.asg "USE_RETA", _STACKMODEL
	HWI_config  _ZEROTAB, _STACKMODEL

;; ======== SWI_config ========
	.asg GBL_NULL, _EHOOKFXN
	.asg GBL_NULL, _IHOOKFXN
	.asg SWI_F_exec, _EXECFXN
	.asg SWI_F_run, _RUNFXN
	SWI_config  _EHOOKFXN, _IHOOKFXN, _EXECFXN, _RUNFXN

;; ======== TSK_config ========
	.asg 0400H, _STACKSIZE
	.asg 0100H, _SYSTACKSIZE
	.asg MEM_NULL, _STACKSEG
	.asg 01H, _PRIORITY
	.asg _FXN_F_nop, _VCREATEFXN
	.asg _FXN_F_nop, _VDELETEFXN
	.asg _FXN_F_nop, _VEXITFXN
	.asg 00H, _SWITCHFXN
	.asg 00H, _READYFXN
	.asg 00H, _NUM_HOOKS
	TSK_config  _STACKSIZE, _SYSTACKSIZE, _STACKSEG, _PRIORITY, _VCREATEFXN, _VDELETEFXN, _VEXITFXN, _SWITCHFXN, _READYFXN, _NUM_HOOKS

;; ======== IDL_config ========
	.asg 01H, _USECLKIDLTIME
	.asg _IDL_stub, _CALIBRFXN
	.asg 00H, _CALIBRERROR
	IDL_config  _USECLKIDLTIME, _CALIBRFXN, _CALIBRERROR

;; ======== ISRC_config ========
	ISRC_config

;; ======== LOG_config ========
	.asg 01H, _ENABLED
	LOG_config  _ENABLED

;; ======== PIP_config ========
	.asg 02H, _gNumEmbed
	.asg 00H, _gNextId
	.asg 064H, _OBJSIZE
	PIP_config  _gNumEmbed, _gNextId, _OBJSIZE

;; ======== SEM_config ========
	SEM_config

;; ======== MBX_config ========
	MBX_config

;; ======== QUE_config ========
	QUE_config

;; ======== LCK_config ========
	LCK_config

;; ======== STS_config ========
	STS_config

;; ======== SYS_config ========
	.asg _UTL_doAbort, _ABORTFXN
	.asg _UTL_doError, _ERRORFXN
	.asg _UTL_halt, _EXITFXN
	.asg _UTL_doPutc, _PUTCFXN
	SYS_config  _ABORTFXN, _ERRORFXN, _EXITFXN, _PUTCFXN

;; ======== SIO_config ========
	SIO_config

;; ======== GIO_config ========
	.asg _FXN_F_nop, _CREATEFXN
	.asg _FXN_F_nop, _DELETEFXN
	.asg _FXN_F_nop, _PENDFXN
	.asg _FXN_F_nop, _POSTFXN
	GIO_config  _CREATEFXN, _DELETEFXN, _PENDFXN, _POSTFXN

;; ======== DEV_config ========
	DEV_config

;; ======== UDEV_config ========
	UDEV_config

;; ======== DIO_config ========
	.asg 00H, _STATIC
	.asg 00H, _NUMTSKBASE
	.asg 00H, _NUMSWIBASE
	DIO_config  _STATIC, _NUMTSKBASE, _NUMSWIBASE

;; ======== DGN_config ========
	DGN_config

;; ======== DHL_config ========
	.asg 00H, _gChannelsAvailable
	DHL_config  _gChannelsAvailable

;; ======== DPI_config ========
	DPI_config

;; ======== MSGQ_config ========
	.asg 00H, _USEMSGQ
	MSGQ_config  _USEMSGQ

;; ======== HOOK_config ========
	.asg 00H, _KNLID
	HOOK_config  _KNLID

;; ======== PWRM_config ========
	.asg 00H, _PWRM_ENABLE
	.asg _FXN_F_nop, _PWRM_BOOTHOOKFXN
	.asg 00H, _PWRM_ADAPTCLK
	.asg 05H, _PWRM_IDLEMASK
	.asg 023H, _PWRM_CAPSMASK
	.asg 00H, _PWRM_SCALING
	.asg 0fH, _PWRM_INITSP
	.asg 0640H, _PWRM_INITMILVOLTS
	.asg 03fH, _PWRM_DS_IDLEMASK
	.asg 00H, _PWRM_IER0
	.asg 00H, _PWRM_IER1
	PWRM_config  _PWRM_ENABLE, _PWRM_BOOTHOOKFXN, _PWRM_ADAPTCLK, _PWRM_IDLEMASK, _PWRM_CAPSMASK, _PWRM_SCALING, _PWRM_INITSP, _PWRM_INITMILVOLTS, _PWRM_DS_IDLEMASK, _PWRM_IER0, _PWRM_IER1

;; ======== MEM_Obj VECT ========
;; This object defines space for the DSP's interrupt vectors and can't be deleted
;;
;; MEM_Obj VECT (len, iAllocHeap, iSegZero, iHeapId)
	.global VECT
	.asg 080H, _len
	.asg 00H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, VECT, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj NOR ========
;; NOR Flash
;;
;; MEM_Obj NOR (len, iAllocHeap, iSegZero, iHeapId)
	.global NOR
	.asg 0200000H, _len
	.asg 00H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, NOR, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj NAND ========
;; NAND Flash
;;
;; MEM_Obj NAND (len, iAllocHeap, iSegZero, iHeapId)
	.global NAND
	.asg 080000H, _len
	.asg 00H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, NAND, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SRAM ========
;; External SRAM
;;
;; MEM_Obj SRAM (len, iAllocHeap, iSegZero, iHeapId)
	.global SRAM
	.asg 03d8000H, _len
	.asg 00H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj DARAM ========
;; 8 blocks of 8K bytes on-chip Dual Access RAM
;;
;; MEM_Obj DARAM (len, iAllocHeap, iSegZero, iHeapId)
	.global DARAM
	.asg 07f20H, _len
	.asg 01H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg _SEG0, _iHeapId
	MEM_Obj 1, DARAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SARAM ========
;; 32 blocks of 8K bytes on-chip Single Access RAM
;;
;; MEM_Obj SARAM (len, iAllocHeap, iSegZero, iHeapId)
	.global SARAM
	.asg 020000H, _len
	.asg 00H, _iAllocHeap
	.asg DARAM, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SARAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== CLK_Obj PRD_clock ========
;; This clock function calls PRD_tick from within the on-chip timer ISR
;;
;; CLK_Obj PRD_clock (function)
	.global PRD_clock
	.asg PRD_F_tick, _function
	CLK_Obj 1, PRD_clock, 0, _function

;; ======== HST_Obj RTA_fromHost ========
;; Used to access LOG and STS data
;;
;; HST_Obj RTA_fromHost (mode, buf, framesize, numframes, biosLinkChnlNbr, stsflg, notify, arg0, arg1, lnk, bufFrameAlign)
	.global RTA_fromHost
	.asg "input", _mode
	.asg "<NULL>", _buf
	.asg 08H, _framesize
	.asg 01H, _numframes
	.asg 0cH, _biosLinkChnlNbr
	.asg 00H, _stsflg
	.asg _FXN_F_nop, _notify
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg "RTDX", _lnk
	.asg 04H, _bufFrameAlign
	HST_Obj 1, RTA_fromHost, 1, _mode, _buf, _framesize, _numframes, _biosLinkChnlNbr, _stsflg, _notify, _arg0, _arg1, _lnk, _bufFrameAlign

;; ======== HST_Obj RTA_toHost ========
;; Used to access LOG and STS data
;;
;; HST_Obj RTA_toHost (mode, buf, framesize, numframes, biosLinkChnlNbr, stsflg, notify, arg0, arg1, lnk, bufFrameAlign)
	.global RTA_toHost
	.asg "output", _mode
	.asg "<NULL>", _buf
	.asg 040H, _framesize
	.asg 01H, _numframes
	.asg 0dH, _biosLinkChnlNbr
	.asg 00H, _stsflg
	.asg _FXN_F_nop, _notify
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg "RTDX", _lnk
	.asg 04H, _bufFrameAlign
	HST_Obj 1, RTA_toHost, 0, _mode, _buf, _framesize, _numframes, _biosLinkChnlNbr, _stsflg, _notify, _arg0, _arg1, _lnk, _bufFrameAlign

;; ======== HWI_Obj HWI_RESET ========
;; defines function for the RESET ISR
;;
;; HWI_Obj HWI_RESET (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_RESET
	.asg _c_int00, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_RESET, 0, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_NMI ========
;; defines function for the NMI ISR
;;
;; HWI_Obj HWI_NMI (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_NMI
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_NMI, 1, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT2 ========
;; defines the INT2 Interrupt
;;
;; HWI_Obj HWI_INT2 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT2
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT2, 2, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT3 ========
;; defines the INT3 Interrupt
;;
;; HWI_Obj HWI_INT3 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT3
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT3, 3, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT4 ========
;; defines the INT4 Interrupt
;;
;; HWI_Obj HWI_INT4 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT4
	.asg _CLK_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "CLK", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 010H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT4, 4, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT5 ========
;; defines the INT5 Interrupt
;;
;; HWI_Obj HWI_INT5 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT5
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 020H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT5, 5, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT6 ========
;; defines the INT6 Interrupt
;;
;; HWI_Obj HWI_INT6 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT6
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 040H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT6, 6, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT7 ========
;; defines the INT7 Interrupt
;;
;; HWI_Obj HWI_INT7 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT7
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 080H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT7, 7, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT8 ========
;; defines the INT8 Interrupt
;;
;; HWI_Obj HWI_INT8 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT8
	.asg _DmaInterrupt, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0100H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT8, 8, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT9 ========
;; defines the INT9  Interrupt
;;
;; HWI_Obj HWI_INT9 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT9
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0200H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT9, 9, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT10 ========
;; defines the INT10 Interrupt
;;
;; HWI_Obj HWI_INT10 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT10
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0400H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT10, 10, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT11 ========
;; defines the INT11 Interrupt
;;
;; HWI_Obj HWI_INT11 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT11
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 0800H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT11, 11, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT12 ========
;; defines the INT12 Interrupt
;;
;; HWI_Obj HWI_INT12 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT12
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT12, 12, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT13 ========
;; defines the INT13 Interrupt
;;
;; HWI_Obj HWI_INT13 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT13
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT13, 13, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT14 ========
;; defines the INT14 Interrupt
;;
;; HWI_Obj HWI_INT14 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT14
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT14, 14, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT15 ========
;; defines the INT15 Interrupt
;;
;; HWI_Obj HWI_INT15 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT15
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08000H, _Ier0Mask
	.asg 00H, _Ier1Mask
	HWI_Obj 1, HWI_INT15, 15, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT16 ========
;; defines the INT16 Interrupt
;;
;; HWI_Obj HWI_INT16 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT16
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 01H, _Ier1Mask
	HWI_Obj 1, HWI_INT16, 16, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT17 ========
;; defines the INT17 Interrupt
;;
;; HWI_Obj HWI_INT17 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT17
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 02H, _Ier1Mask
	HWI_Obj 1, HWI_INT17, 17, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT18 ========
;; defines the INT18 Interrupt
;;
;; HWI_Obj HWI_INT18 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT18
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 04H, _Ier1Mask
	HWI_Obj 1, HWI_INT18, 18, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT19 ========
;; defines the INT19 Interrupt
;;
;; HWI_Obj HWI_INT19 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT19
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 08H, _Ier1Mask
	HWI_Obj 1, HWI_INT19, 19, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT20 ========
;; defines the INT20 Interrupt
;;
;; HWI_Obj HWI_INT20 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT20
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 010H, _Ier1Mask
	HWI_Obj 1, HWI_INT20, 20, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT21 ========
;; defines the INT21 Interrupt
;;
;; HWI_Obj HWI_INT21 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT21
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 020H, _Ier1Mask
	HWI_Obj 1, HWI_INT21, 21, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT22 ========
;; defines the INT22 Interrupt
;;
;; HWI_Obj HWI_INT22 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT22
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 040H, _Ier1Mask
	HWI_Obj 1, HWI_INT22, 22, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_INT23 ========
;; defines the INT23 Interrupt
;;
;; HWI_Obj HWI_INT23 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_INT23
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 080H, _Ier1Mask
	HWI_Obj 1, HWI_INT23, 23, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_BERR ========
;; defines the BERR Interrupt
;;
;; HWI_Obj HWI_BERR (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_BERR
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0100H, _Ier1Mask
	HWI_Obj 1, HWI_BERR, 24, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_DLOG ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_DLOG (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_DLOG
	.asg _RTDX_Poll, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0200H, _Ier1Mask
	HWI_Obj 1, HWI_DLOG, 25, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_RTOS ========
;; defines the RTOS Interrupt
;;
;; HWI_Obj HWI_RTOS (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_RTOS
	.asg _RTDX_H2TPoll, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0400H, _Ier1Mask
	HWI_Obj 1, HWI_RTOS, 26, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT27 ========
;; defines the SINT27 Interrupt
;;
;; HWI_Obj HWI_SINT27 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT27
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 0800H, _Ier1Mask
	HWI_Obj 1, HWI_SINT27, 27, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT28 ========
;; defines the SINT28 Interrupt
;;
;; HWI_Obj HWI_SINT28 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT28
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 01000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT28, 28, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT29 ========
;; defines the SINT29 Interrupt
;;
;; HWI_Obj HWI_SINT29 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT29
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 02000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT29, 29, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT30 ========
;; defines the SINT30 Interrupt
;;
;; HWI_Obj HWI_SINT30 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT30
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 04000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT30, 30, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== HWI_Obj HWI_SINT31 ========
;; defines the SINT31 Interrupt
;;
;; HWI_Obj HWI_SINT31 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, Ier0Mask, Ier1Mask)
	.global HWI_SINT31
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 00H, _Ier0Mask
	.asg 08000H, _Ier1Mask
	HWI_Obj 1, HWI_SINT31, 31, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _Ier0Mask, _Ier1Mask

;; ======== SWI_Obj KNL_swi ========
;; This Software Interrupt calls the TSK scheduler
;;
;; SWI_Obj KNL_swi (function, pri, mailbox, arg0, arg1, dorta, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global KNL_swi
	.asg _KNL_run, _function
	.asg 00H, _pri
	.asg 00H, _mailbox
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg 01H, _dorta
	.asg 00H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	SWI_Obj 1, KNL_swi, 0, _function, _pri, _mailbox, _arg0, _arg1, _dorta, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== TSK_Obj TSK_idle ========
;; This is the idle task; it only runs when no other task is ready
;;
;; TSK_Obj TSK_idle (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, iSTKSZ, iSYSTKSZ, iSTKSEG, iPRI, iENV, iEXITFLAG, iUSETSKNAME, iSTATREG, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global TSK_idle
	.asg IDL_F_loop, _iFXN
	.asg 00H, _iARG0
	.asg 00H, _iARG1
	.asg 00H, _iARG2
	.asg 00H, _iARG3
	.asg 00H, _iARG4
	.asg 00H, _iARG5
	.asg 00H, _iARG6
	.asg 00H, _iARG7
	.asg 01H, _iAUTOSTK
	.asg null, _iMANSTK
	.asg 0400H, _iSTKSZ
	.asg 0100H, _iSYSTKSZ
	.asg DARAM, _iSTKSEG
	.asg 00H, _iPRI
	.asg 00H, _iENV
	.asg 01H, _iEXITFLAG
	.asg 00H, _iUSETSKNAME
	.asg 00H, _iSTATREG
	.asg 01H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	TSK_Obj 1, TSK_idle, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7, _iAUTOSTK, _iMANSTK, _iSTKSZ, _iSYSTKSZ, _iSTKSEG, _iPRI, _iENV, _iEXITFLAG, _iUSETSKNAME, _iSTATREG, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== TSK_Obj TSK_OutputAudio ========
;; <add comments here>
;;
;; TSK_Obj TSK_OutputAudio (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, iSTKSZ, iSYSTKSZ, iSTKSEG, iPRI, iENV, iEXITFLAG, iUSETSKNAME, iSTATREG, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global TSK_OutputAudio
	.asg _AudioTransmitTsk, _iFXN
	.asg 00H, _iARG0
	.asg 00H, _iARG1
	.asg 00H, _iARG2
	.asg 00H, _iARG3
	.asg 00H, _iARG4
	.asg 00H, _iARG5
	.asg 00H, _iARG6
	.asg 00H, _iARG7
	.asg 01H, _iAUTOSTK
	.asg null, _iMANSTK
	.asg 0800H, _iSTKSZ
	.asg 0100H, _iSYSTKSZ
	.asg DARAM, _iSTKSEG
	.asg 01H, _iPRI
	.asg 00H, _iENV
	.asg 01H, _iEXITFLAG
	.asg 00H, _iUSETSKNAME
	.asg 00H, _iSTATREG
	.asg 02H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	TSK_Obj 1, TSK_OutputAudio, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7, _iAUTOSTK, _iMANSTK, _iSTKSZ, _iSYSTKSZ, _iSTKSEG, _iPRI, _iENV, _iEXITFLAG, _iUSETSKNAME, _iSTATREG, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== TSK_Obj TSK_AudioProcessing ========
;; <add comments here>
;;
;; TSK_Obj TSK_AudioProcessing (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, iSTKSZ, iSYSTKSZ, iSTKSEG, iPRI, iENV, iEXITFLAG, iUSETSKNAME, iSTATREG, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global TSK_AudioProcessing
	.asg _AudioProcessingTsk, _iFXN
	.asg 00H, _iARG0
	.asg 00H, _iARG1
	.asg 00H, _iARG2
	.asg 00H, _iARG3
	.asg 00H, _iARG4
	.asg 00H, _iARG5
	.asg 00H, _iARG6
	.asg 00H, _iARG7
	.asg 01H, _iAUTOSTK
	.asg null, _iMANSTK
	.asg 0800H, _iSTKSZ
	.asg 0100H, _iSYSTKSZ
	.asg DARAM, _iSTKSEG
	.asg 01H, _iPRI
	.asg 00H, _iENV
	.asg 01H, _iEXITFLAG
	.asg 00H, _iUSETSKNAME
	.asg 00H, _iSTATREG
	.asg 03H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	TSK_Obj 1, TSK_AudioProcessing, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7, _iAUTOSTK, _iMANSTK, _iSTKSZ, _iSYSTKSZ, _iSTKSEG, _iPRI, _iENV, _iEXITFLAG, _iUSETSKNAME, _iSTATREG, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== IDL_Obj IDL_cpuLoad ========
;; This object is required by the system to acquire CPU load data
;;
;; IDL_Obj IDL_cpuLoad (function, calibration)
	.global IDL_cpuLoad
	.asg IDL_F_busy, _function
	.asg 01H, _calibration
	IDL_Obj 1, IDL_cpuLoad, 0, _function, _calibration

;; ======== IDL_Obj LNK_dataPump ========
;; This object cannot be deleted
;;
;; IDL_Obj LNK_dataPump (function, calibration)
	.global LNK_dataPump
	.asg LNK_F_dataPump, _function
	.asg 01H, _calibration
	IDL_Obj 1, LNK_dataPump, 0, _function, _calibration

;; ======== IDL_Obj RTA_dispatcher ========
;; This object cannot be deleted
;;
;; IDL_Obj RTA_dispatcher (function, calibration)
	.global RTA_dispatcher
	.asg RTA_F_dispatch, _function
	.asg 01H, _calibration
	IDL_Obj 1, RTA_dispatcher, 0, _function, _calibration

;; ======== IDL_Obj IDL_ButtonMonitor ========
;; <add comments here>
;;
;; IDL_Obj IDL_ButtonMonitor (function, calibration)
	.global IDL_ButtonMonitor
	.asg _IDLButtonMonitor, _function
	.asg 01H, _calibration
	IDL_Obj 1, IDL_ButtonMonitor, 0, _function, _calibration

;; ======== LOG_Obj LOG_system ========
;; This object is required by the system to accumulate execution trace information
;;
;; LOG_Obj LOG_system (bufseg, buflen, logtype, iType, iFormat)
	.global LOG_system
	.asg DARAM, _bufseg
	.asg 0200H, _buflen
	.asg "circular", _logtype
	.asg "system", _iType
	.asg "0x%x, 0x%x, 0x%x", _iFormat
	LOG_Obj 1, LOG_system, 0, _bufseg, _buflen, _logtype, _iType, _iFormat

;; ======== LOG_Obj trace ========
;; <add comments here>
;;
;; LOG_Obj trace (bufseg, buflen, logtype, iType, iFormat)
	.global trace
	.asg DARAM, _bufseg
	.asg 0400H, _buflen
	.asg "circular", _logtype
	.asg "printf", _iType
	.asg "0x%x, 0x%x, 0x%x", _iFormat
	LOG_Obj 1, trace, 0, _bufseg, _buflen, _logtype, _iType, _iFormat

;; ======== SEM_Obj SEM_AudioProcessor ========
;; <add comments here>
;;
;; SEM_Obj SEM_AudioProcessor (iCount)
	.global SEM_AudioProcessor
	.asg 00H, _iCount
	SEM_Obj 1, SEM_AudioProcessor, 0, _iCount

;; ======== SEM_Obj SEM_OutputAudio ========
;; <add comments here>
;;
;; SEM_Obj SEM_OutputAudio (iCount)
	.global SEM_OutputAudio
	.asg 00H, _iCount
	SEM_Obj 1, SEM_OutputAudio, 0, _iCount

;; ======== STS_Obj IDL_busyObj ========
;; This object is required by the system to accumulate CPU load statistics
;;
;; STS_Obj IDL_busyObj (filter, maxformat, sumformat, avgformat, op, uType, iA, iB, iC, prevhigh, prevlow)
	.global IDL_busyObj
	.asg 01H, _filter
	.asg "%g", _maxformat
	.asg "%g", _sumformat
	.asg "%.2f", _avgformat
	.asg 00H, _op
	.asg 02H, _uType
	.asg 01H, _iA
	.asg 00H, _iB
	.asg 01H, _iC
	.asg 00H, _prevhigh
	.asg 00H, _prevlow
	STS_Obj 1, IDL_busyObj, 0, _filter, _maxformat, _sumformat, _avgformat, _op, _uType, _iA, _iB, _iC, _prevhigh, _prevlow

;; MODULE INITIALIZATION
	.sect ".sysinit"
	.global BIOS_init, _BIOS_init
BIOS_init:
_BIOS_init:
	GBL_preamble
	GBL_init
	SEM_init
	MEM_init
	OBJ_init
	BUF_init
	POOL_init
	CLK_init
	PRD_init
	RTDX_init
	IDL_init
	LCK_init
	LOG_init
	MBX_init
	PIP_init
	QUE_init
	STS_init
	SYS_init
	HWI_init
	PWRM_init
	DEV_init
	UDEV_init
	GIO_init
	HST_init
	DIO_init
	DGN_init
	DHL_init
	DPI_init
	SIO_init
	MSGQ_init
	SWI_init
	HOOK_init
	TSK_init
	ISRC_init
	GBL_postamble

;; MODULE STARTUP
	.sect ".sysinit"
	.global BIOS_start, _BIOS_start
BIOS_start:
_BIOS_start:
	GBL_preamble
	GBL_startup
	SEM_startup
	MEM_startup
	OBJ_startup
	BUF_startup
	POOL_startup
	CLK_startup
	PRD_startup
	RTDX_startup
	IDL_startup
	LCK_startup
	LOG_startup
	MBX_startup
	PIP_startup
	QUE_startup
	STS_startup
	SYS_startup
	HWI_startup
	PWRM_startup
	DEV_startup
	UDEV_startup
	GIO_startup
	HST_startup
	DIO_startup
	DGN_startup
	DHL_startup
	DPI_startup
	SIO_startup
	MSGQ_startup
	SWI_startup
	HOOK_startup
	TSK_startup
	ISRC_startup
	GBL_postamble

;; EPILOGUE
	GBL_end
	MEM_end
	OBJ_end
	BUF_end
	POOL_end
	CLK_end
	PRD_end
	RTDX_end
	HST_end
	HWI_end
	SWI_end
	TSK_end
	IDL_end
	ISRC_end
	LOG_end
	PIP_end
	SEM_end
	MBX_end
	QUE_end
	LCK_end
	STS_end
	SYS_end
	SIO_end
	GIO_end
	DEV_end
	UDEV_end
	DIO_end
	DGN_end
	DHL_end
	DPI_end
	MSGQ_end
	HOOK_end
	PWRM_end

	.copy confend.s55
